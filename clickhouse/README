# Clickhouse Cluster
very simple and basic cluster via docker compose

## prepare
docker network create clickhouse
docker volume create --name=clickhouse-1a
docker volume create --name=clickhouse-1b
docker volume create --name=clickhouse-2a
docker volume create --name=clickhouse-2b
docker volume create --name=clickhouse-master
docker volume create --name=clickhouse-zk
docker volume create --name=clickhouse-vector

## start
COMPOSE_PROFILES=vector,prometheus docker compose start

## check it
docker compose exec master clickhouse-client -mn
> SELECT * FROM system.clusters

## migrate / https://github.com/golang-migrate/migrate
migrate -path ./migrations -database 'clickhouse://master.clickhouse.docker:9000?&x-multi-statement=true' up

# use vector
docker compose --profile=vector start vector

## once vector running
select container_name, uuid, query from vector where length(query) > 0 order by timestamp desc limit 20;
select message from vector where query like '%1085664e-c82a-469e-b5a7-d986937b2294%' order by timestamp desc;
select message from vector where uuid = '{581f2464-f9be-4539-bef6-51dc0d6c4600}' order by timestamp desc;

# backup
./clickhouse-backup shard1-a tables
./clickhouse-backup shard1-a create --table=default.vector_data --partitions=20230816 vector1
./clickhouse-backup shard1-a list
./clickhouse-backup shard1-a upload vector1
./clickhouse-backup shard1-a delete local vector1

# restore
on master: create database `restore`,
           create non-replicated `restore.vector_data` with correct schema (cat /home/test/clickhouse-backup/vector1/metadata/default/vector_data.json | jq .query)
./clickhouse-backup master restore_remote -d --restore-database-mapping=default:restore vector1
./clickhouse-backup master delete local vector1

# build without hdfs
docker build -t urykhy/clickhouse . --build-arg WITH_HDFS=false
